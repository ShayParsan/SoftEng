name: Run E2E tests, Generate allure report and Publish the artifact

on:
  workflow_dispatch:

jobs:
  e2e:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read

    steps:
      - name: Checkout Frontend Repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install Frontend Dependencies
        run: npm ci

      - name: Load E2E Environment Variables
        run: |
          echo "üì¶ Loading .env.e2e"
          cat .env.e2e >> $GITHUB_ENV

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Get Latest Release Info
        id: get_release
        run: |
          echo "üîç Fetching latest backend release..."
          API_URL="https://api.github.com/repos/UcllSoftwareEngineering2425/backend-bcs05/releases/latest"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.BACKEND_REPO_PAT }}" $API_URL)
          JAR_NAME=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name | endswith(".jar")) | .name')
          echo "JAR_NAME=$JAR_NAME" >> $GITHUB_ENV

      - name: Download JAR from GitHub Releases
        run: |
          echo "‚¨áÔ∏è Downloading backend JAR: $JAR_NAME"
          API_URL="https://api.github.com/repos/UcllSoftwareEngineering2425/backend-bcs05/releases/latest"
          RESPONSE=$(curl -s -H "Authorization: token ${{ secrets.BACKEND_REPO_PAT }}" $API_URL)
          DOWNLOAD_URL=$(echo "$RESPONSE" | jq -r '.assets[] | select(.name == "'"$JAR_NAME"'") | .url')
          curl -L -H "Authorization: token ${{ secrets.BACKEND_REPO_PAT }}" \
               -H "Accept: application/octet-stream" -o "$JAR_NAME" "$DOWNLOAD_URL"

      - name: Start Backend
        run: |
          echo "üöÄ Starting backend..."
          nohup java -jar "$JAR_NAME" --spring.profiles.active=dev > backend.log 2>&1 &
          echo "‚è≥ Waiting for Flyway migrations and backend to be ready..."
          sleep 20
          tail -n 20 backend.log || true
        env:
          JWT_SECRET_KEY: d2ViNC1ub3Qtc28tc2VjcmV0LWFjY2Vzcy1zZWNyZXQ=
          CORS_ALLOWED_ORIGINS: http://localhost:3000

      - name: Start Frontend
        run: |
          echo "üöÄ Starting frontend..."
          chmod +x start.sh
          ./start.sh &
        env:
          NEXT_PUBLIC_API_URL: http://localhost:8080

      - name: Wait for Servers to Start
        run: |
          echo "‚è≥ Waiting for frontend and backend..."
          npx wait-on http://localhost:3000
          npx wait-on http://localhost:8080/status

      - name: Ensure test data is ready
        run: |
          echo "ü©∫ Checking if lecturers data is available..."
          for i in {1..10}; do
            TOKEN=$(curl -s -X POST http://localhost:8080/users/login \
              -H "Content-Type: application/json" \
              -d '{"username":"admin","password":"admin123"}' | jq -r .token)
          
            if [ "$TOKEN" = "null" ] || [ -z "$TOKEN" ]; then
              echo "‚ùå Failed to get token, retrying..."
              sleep 3
              continue
            fi
          
            RESPONSE=$(curl -s http://localhost:8080/lecturers -H "Authorization: Bearer $TOKEN")
            if echo "$RESPONSE" | grep -q "Johan"; then
              echo "‚úÖ Lecturers data ready"
              exit 0
            fi
          
            echo "‚è≥ Data not ready yet, retrying..."
            sleep 3
          done
          
          echo "‚ùå Lecturers data not found after waiting"
          exit 1         

      - name: Run Cypress Headless E2E Tests
        run: npx cypress run --config baseUrl=$CYPRESS_BASE_URL,defaultCommandTimeout=10000

      - name: Generate Allure Report
        run: npx allure generate allure-results --clean -o allure-report

      - name: Upload Allure Report Artifact
        uses: actions/upload-artifact@v4
        with:
          name: E2E Allure Report
          path: allure-report

